name: Update JSON file

on: [push, workflow_dispatch]

jobs:
  update_file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN_THING }}

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Scan for Repositories and Update JSON
        run: |
            import json
            import requests
            import subprocess

            # GitHub API URL to search for repositories with the tag "test-scan-2"
            GITHUB_API_URL = "https://api.github.com/search/repositories?q=topic:test-scan-2+is:public"
            HEADERS = {"Authorization": "token ${{ secrets.TOKEN_THING }}"}
            
            # Define the JSON file
            json_file = "test.json"

            # Start with an empty dictionary
            new_data = {}

            # Fetch repositories
            response = requests.get(GITHUB_API_URL, headers=HEADERS)
            if response.status_code == 200:
                repos = response.json().get("items", [])
                for repo in repos:
                    repo_name = repo["full_name"]
                    properties_url = f"https://raw.githubusercontent.com/{repo_name}/main/properties.json"
                    
                    # Try to fetch the properties.json file
                    prop_response = requests.get(properties_url, headers=HEADERS)
                    if prop_response.status_code == 200:
                        try:
                            properties_data = json.loads(prop_response.text)
                            for key, value in properties_data.items():
                                if isinstance(value, dict):  # Ensure it's a dictionary
                                    new_data[key] = value
                        except json.JSONDecodeError:
                            print(f"Invalid JSON format in {repo_name}/properties.json")
                    else:
                        print(f"No properties.json found in {repo_name}")

            # Write back the modified JSON
            with open(json_file, "w") as f:
                json.dump(new_data, f, indent=4)

            # Git commit and push
            subprocess.run(["git", "add", json_file])
            commit_result = subprocess.run(["git", "commit", "-m", "Update JSON file"])
            if commit_result.returncode == 0:
                subprocess.run(["git", "push"])
            else:
                print("No changes to commit.")
        shell: python

      - name: Commit and push changes
        run: |
          git add test.json
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Updated JSON"
            git push https://Axolotian-dev:${{ secrets.TOKEN_THING }}@github.com/${{ github.repository }}.git
          else
            echo "No changes to commit."
          fi
